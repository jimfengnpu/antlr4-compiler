
// Generated from src/frontend/grammar/SysY.g4 by ANTLR 4.12.0


#include "SysYLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct SysYLexerStaticData final {
  SysYLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  SysYLexerStaticData(const SysYLexerStaticData&) = delete;
  SysYLexerStaticData(SysYLexerStaticData&&) = delete;
  SysYLexerStaticData& operator=(const SysYLexerStaticData&) = delete;
  SysYLexerStaticData& operator=(SysYLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag sysylexerLexerOnceFlag;
SysYLexerStaticData *sysylexerLexerStaticData = nullptr;

void sysylexerLexerInitialize() {
  assert(sysylexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<SysYLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "WS", "COMMENT", 
      "VoidType", "IntType", "FloatType", "ConstPrefix", "IF", "ELSE", "WHILE", 
      "BREAK", "CONTINUE", "RETURN", "IntConstant", "FloatConstant", "DecimalFloatingConstant", 
      "HexadecimalFloatingConstant", "FractionalConstant", "ExponentPart", 
      "Sign", "DigitSequence", "HexadecimalFractionalConstant", "BinaryExponentPart", 
      "HexadecimalDigits", "Ident", "NonDigit", "Digit", "NonZeroDigit", 
      "OctalDigit", "HexadecimalDigit"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "','", "';'", "'('", "')'", "'='", "'['", "']'", "'{'", "'}'", 
      "'<'", "'>'", "'<='", "'>='", "'=='", "'!='", "'&&'", "'||'", "'+'", 
      "'-'", "'!'", "'*'", "'/'", "'%'", "", "", "'void'", "'int'", "'float'", 
      "'const'", "'if'", "'else'", "'while'", "'break'", "'continue'", "'return'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "WS", "COMMENT", "VoidType", "IntType", 
      "FloatType", "ConstPrefix", "IF", "ELSE", "WHILE", "BREAK", "CONTINUE", 
      "RETURN", "IntConstant", "FloatConstant", "DigitSequence", "Ident"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,39,351,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,
  	1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,12,1,12,
  	1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,
  	1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,4,23,159,
  	8,23,11,23,12,23,160,1,23,1,23,1,24,1,24,1,24,1,24,5,24,169,8,24,10,24,
  	12,24,172,9,24,1,24,1,24,1,24,1,24,5,24,178,8,24,10,24,12,24,181,9,24,
  	1,24,1,24,3,24,185,8,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,
  	1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,
  	1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,
  	1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
  	1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,5,35,248,8,35,10,35,
  	12,35,251,9,35,1,35,1,35,5,35,255,8,35,10,35,12,35,258,9,35,1,35,1,35,
  	1,35,4,35,263,8,35,11,35,12,35,264,3,35,267,8,35,1,36,1,36,3,36,271,8,
  	36,1,37,1,37,3,37,275,8,37,1,37,1,37,1,37,3,37,280,8,37,1,38,1,38,1,38,
  	1,38,3,38,286,8,38,1,38,1,38,1,39,3,39,291,8,39,1,39,1,39,1,39,1,39,1,
  	39,3,39,298,8,39,1,40,1,40,3,40,302,8,40,1,40,1,40,1,41,1,41,1,42,4,42,
  	309,8,42,11,42,12,42,310,1,43,3,43,314,8,43,1,43,1,43,1,43,1,43,1,43,
  	3,43,321,8,43,1,44,1,44,3,44,325,8,44,1,44,1,44,1,45,4,45,330,8,45,11,
  	45,12,45,331,1,46,1,46,1,46,5,46,337,8,46,10,46,12,46,340,9,46,1,47,1,
  	47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,179,0,52,1,1,3,2,5,3,7,4,
  	9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
  	17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
  	57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,0,77,0,79,0,
  	81,0,83,0,85,38,87,0,89,0,91,0,93,39,95,0,97,0,99,0,101,0,103,0,1,0,11,
  	3,0,9,10,13,13,32,32,2,0,10,10,13,13,2,0,88,88,120,120,2,0,69,69,101,
  	101,2,0,43,43,45,45,2,0,80,80,112,112,3,0,65,90,95,95,97,122,1,0,48,57,
  	1,0,49,57,1,0,48,55,3,0,48,57,65,70,97,102,360,0,1,1,0,0,0,0,3,1,0,0,
  	0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
  	1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
  	0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
  	0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
  	1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,
  	0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,
  	0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,85,1,0,0,0,0,93,1,0,0,0,1,105,
  	1,0,0,0,3,107,1,0,0,0,5,109,1,0,0,0,7,111,1,0,0,0,9,113,1,0,0,0,11,115,
  	1,0,0,0,13,117,1,0,0,0,15,119,1,0,0,0,17,121,1,0,0,0,19,123,1,0,0,0,21,
  	125,1,0,0,0,23,127,1,0,0,0,25,130,1,0,0,0,27,133,1,0,0,0,29,136,1,0,0,
  	0,31,139,1,0,0,0,33,142,1,0,0,0,35,145,1,0,0,0,37,147,1,0,0,0,39,149,
  	1,0,0,0,41,151,1,0,0,0,43,153,1,0,0,0,45,155,1,0,0,0,47,158,1,0,0,0,49,
  	184,1,0,0,0,51,188,1,0,0,0,53,193,1,0,0,0,55,197,1,0,0,0,57,203,1,0,0,
  	0,59,209,1,0,0,0,61,212,1,0,0,0,63,217,1,0,0,0,65,223,1,0,0,0,67,229,
  	1,0,0,0,69,238,1,0,0,0,71,266,1,0,0,0,73,270,1,0,0,0,75,279,1,0,0,0,77,
  	281,1,0,0,0,79,297,1,0,0,0,81,299,1,0,0,0,83,305,1,0,0,0,85,308,1,0,0,
  	0,87,320,1,0,0,0,89,322,1,0,0,0,91,329,1,0,0,0,93,333,1,0,0,0,95,341,
  	1,0,0,0,97,343,1,0,0,0,99,345,1,0,0,0,101,347,1,0,0,0,103,349,1,0,0,0,
  	105,106,5,44,0,0,106,2,1,0,0,0,107,108,5,59,0,0,108,4,1,0,0,0,109,110,
  	5,40,0,0,110,6,1,0,0,0,111,112,5,41,0,0,112,8,1,0,0,0,113,114,5,61,0,
  	0,114,10,1,0,0,0,115,116,5,91,0,0,116,12,1,0,0,0,117,118,5,93,0,0,118,
  	14,1,0,0,0,119,120,5,123,0,0,120,16,1,0,0,0,121,122,5,125,0,0,122,18,
  	1,0,0,0,123,124,5,60,0,0,124,20,1,0,0,0,125,126,5,62,0,0,126,22,1,0,0,
  	0,127,128,5,60,0,0,128,129,5,61,0,0,129,24,1,0,0,0,130,131,5,62,0,0,131,
  	132,5,61,0,0,132,26,1,0,0,0,133,134,5,61,0,0,134,135,5,61,0,0,135,28,
  	1,0,0,0,136,137,5,33,0,0,137,138,5,61,0,0,138,30,1,0,0,0,139,140,5,38,
  	0,0,140,141,5,38,0,0,141,32,1,0,0,0,142,143,5,124,0,0,143,144,5,124,0,
  	0,144,34,1,0,0,0,145,146,5,43,0,0,146,36,1,0,0,0,147,148,5,45,0,0,148,
  	38,1,0,0,0,149,150,5,33,0,0,150,40,1,0,0,0,151,152,5,42,0,0,152,42,1,
  	0,0,0,153,154,5,47,0,0,154,44,1,0,0,0,155,156,5,37,0,0,156,46,1,0,0,0,
  	157,159,7,0,0,0,158,157,1,0,0,0,159,160,1,0,0,0,160,158,1,0,0,0,160,161,
  	1,0,0,0,161,162,1,0,0,0,162,163,6,23,0,0,163,48,1,0,0,0,164,165,5,47,
  	0,0,165,166,5,47,0,0,166,170,1,0,0,0,167,169,8,1,0,0,168,167,1,0,0,0,
  	169,172,1,0,0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,185,1,0,0,0,172,170,
  	1,0,0,0,173,174,5,47,0,0,174,175,5,42,0,0,175,179,1,0,0,0,176,178,9,0,
  	0,0,177,176,1,0,0,0,178,181,1,0,0,0,179,180,1,0,0,0,179,177,1,0,0,0,180,
  	182,1,0,0,0,181,179,1,0,0,0,182,183,5,42,0,0,183,185,5,47,0,0,184,164,
  	1,0,0,0,184,173,1,0,0,0,185,186,1,0,0,0,186,187,6,24,1,0,187,50,1,0,0,
  	0,188,189,5,118,0,0,189,190,5,111,0,0,190,191,5,105,0,0,191,192,5,100,
  	0,0,192,52,1,0,0,0,193,194,5,105,0,0,194,195,5,110,0,0,195,196,5,116,
  	0,0,196,54,1,0,0,0,197,198,5,102,0,0,198,199,5,108,0,0,199,200,5,111,
  	0,0,200,201,5,97,0,0,201,202,5,116,0,0,202,56,1,0,0,0,203,204,5,99,0,
  	0,204,205,5,111,0,0,205,206,5,110,0,0,206,207,5,115,0,0,207,208,5,116,
  	0,0,208,58,1,0,0,0,209,210,5,105,0,0,210,211,5,102,0,0,211,60,1,0,0,0,
  	212,213,5,101,0,0,213,214,5,108,0,0,214,215,5,115,0,0,215,216,5,101,0,
  	0,216,62,1,0,0,0,217,218,5,119,0,0,218,219,5,104,0,0,219,220,5,105,0,
  	0,220,221,5,108,0,0,221,222,5,101,0,0,222,64,1,0,0,0,223,224,5,98,0,0,
  	224,225,5,114,0,0,225,226,5,101,0,0,226,227,5,97,0,0,227,228,5,107,0,
  	0,228,66,1,0,0,0,229,230,5,99,0,0,230,231,5,111,0,0,231,232,5,110,0,0,
  	232,233,5,116,0,0,233,234,5,105,0,0,234,235,5,110,0,0,235,236,5,117,0,
  	0,236,237,5,101,0,0,237,68,1,0,0,0,238,239,5,114,0,0,239,240,5,101,0,
  	0,240,241,5,116,0,0,241,242,5,117,0,0,242,243,5,114,0,0,243,244,5,110,
  	0,0,244,70,1,0,0,0,245,249,3,99,49,0,246,248,3,97,48,0,247,246,1,0,0,
  	0,248,251,1,0,0,0,249,247,1,0,0,0,249,250,1,0,0,0,250,267,1,0,0,0,251,
  	249,1,0,0,0,252,256,5,48,0,0,253,255,3,101,50,0,254,253,1,0,0,0,255,258,
  	1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,0,257,267,1,0,0,0,258,256,1,0,0,
  	0,259,260,5,48,0,0,260,262,7,2,0,0,261,263,3,103,51,0,262,261,1,0,0,0,
  	263,264,1,0,0,0,264,262,1,0,0,0,264,265,1,0,0,0,265,267,1,0,0,0,266,245,
  	1,0,0,0,266,252,1,0,0,0,266,259,1,0,0,0,267,72,1,0,0,0,268,271,3,75,37,
  	0,269,271,3,77,38,0,270,268,1,0,0,0,270,269,1,0,0,0,271,74,1,0,0,0,272,
  	274,3,79,39,0,273,275,3,81,40,0,274,273,1,0,0,0,274,275,1,0,0,0,275,280,
  	1,0,0,0,276,277,3,85,42,0,277,278,3,81,40,0,278,280,1,0,0,0,279,272,1,
  	0,0,0,279,276,1,0,0,0,280,76,1,0,0,0,281,282,5,48,0,0,282,285,7,2,0,0,
  	283,286,3,87,43,0,284,286,3,91,45,0,285,283,1,0,0,0,285,284,1,0,0,0,286,
  	287,1,0,0,0,287,288,3,89,44,0,288,78,1,0,0,0,289,291,3,85,42,0,290,289,
  	1,0,0,0,290,291,1,0,0,0,291,292,1,0,0,0,292,293,5,46,0,0,293,298,3,85,
  	42,0,294,295,3,85,42,0,295,296,5,46,0,0,296,298,1,0,0,0,297,290,1,0,0,
  	0,297,294,1,0,0,0,298,80,1,0,0,0,299,301,7,3,0,0,300,302,3,83,41,0,301,
  	300,1,0,0,0,301,302,1,0,0,0,302,303,1,0,0,0,303,304,3,85,42,0,304,82,
  	1,0,0,0,305,306,7,4,0,0,306,84,1,0,0,0,307,309,3,97,48,0,308,307,1,0,
  	0,0,309,310,1,0,0,0,310,308,1,0,0,0,310,311,1,0,0,0,311,86,1,0,0,0,312,
  	314,3,91,45,0,313,312,1,0,0,0,313,314,1,0,0,0,314,315,1,0,0,0,315,316,
  	5,46,0,0,316,321,3,91,45,0,317,318,3,91,45,0,318,319,5,46,0,0,319,321,
  	1,0,0,0,320,313,1,0,0,0,320,317,1,0,0,0,321,88,1,0,0,0,322,324,7,5,0,
  	0,323,325,3,83,41,0,324,323,1,0,0,0,324,325,1,0,0,0,325,326,1,0,0,0,326,
  	327,3,85,42,0,327,90,1,0,0,0,328,330,3,103,51,0,329,328,1,0,0,0,330,331,
  	1,0,0,0,331,329,1,0,0,0,331,332,1,0,0,0,332,92,1,0,0,0,333,338,3,95,47,
  	0,334,337,3,95,47,0,335,337,3,97,48,0,336,334,1,0,0,0,336,335,1,0,0,0,
  	337,340,1,0,0,0,338,336,1,0,0,0,338,339,1,0,0,0,339,94,1,0,0,0,340,338,
  	1,0,0,0,341,342,7,6,0,0,342,96,1,0,0,0,343,344,7,7,0,0,344,98,1,0,0,0,
  	345,346,7,8,0,0,346,100,1,0,0,0,347,348,7,9,0,0,348,102,1,0,0,0,349,350,
  	7,10,0,0,350,104,1,0,0,0,23,0,160,170,179,184,249,256,264,266,270,274,
  	279,285,290,297,301,310,313,320,324,331,336,338,2,0,1,0,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  sysylexerLexerStaticData = staticData.release();
}

}

SysYLexer::SysYLexer(CharStream *input) : Lexer(input) {
  SysYLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *sysylexerLexerStaticData->atn, sysylexerLexerStaticData->decisionToDFA, sysylexerLexerStaticData->sharedContextCache);
}

SysYLexer::~SysYLexer() {
  delete _interpreter;
}

std::string SysYLexer::getGrammarFileName() const {
  return "SysY.g4";
}

const std::vector<std::string>& SysYLexer::getRuleNames() const {
  return sysylexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& SysYLexer::getChannelNames() const {
  return sysylexerLexerStaticData->channelNames;
}

const std::vector<std::string>& SysYLexer::getModeNames() const {
  return sysylexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& SysYLexer::getVocabulary() const {
  return sysylexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView SysYLexer::getSerializedATN() const {
  return sysylexerLexerStaticData->serializedATN;
}

const atn::ATN& SysYLexer::getATN() const {
  return *sysylexerLexerStaticData->atn;
}




void SysYLexer::initialize() {
  ::antlr4::internal::call_once(sysylexerLexerOnceFlag, sysylexerLexerInitialize);
}
