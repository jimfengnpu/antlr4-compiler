// const int maxn = 18;
// const int mod = 1000000007;
// int dp[maxn][maxn][maxn][maxn][maxn][7];
// int list[200];

// int equal(int a, int b) {
//     if (a == b)
//         return 1;
//     return 0;
// }

// int dfs(int a, int b, int c, int d, int e, int last){
//     if(dp[a][b][c][d][e][last] != -1)
//         return dp[a][b][c][d][e][last];
//     if(a + b + c + d + e == 0)
//         return 1;
//     int ans = 0;
//     if (a) ans = (ans + (a - equal(last, 2)) * dfs(a - 1, b, c, d, e, 1)) % mod;
//     if (b) ans = (ans + (b - equal(last, 3)) * dfs(a + 1, b - 1, c, d, e, 2)) % mod;
//     if (c) ans = (ans + (c - equal(last, 4)) * dfs(a, b + 1, c - 1, d, e, 3)) % mod;
//     if (d) ans = (ans + (d - equal(last, 5)) * dfs(a, b, c + 1, d - 1, e, 4)) % mod;
//     if (e) ans = (ans + e * dfs(a, b, c, d + 1, e - 1, 5)) % mod;
//     dp[a][b][c][d][e][last] = ans % mod;
//     return dp[a][b][c][d][e][last];
// }

// int cns[20];
 
// int main(){
//     int n = getint();
//     int i = 0; 
//     while (i < maxn) {
//         int j = 0;
//         while(j < maxn) {
//             int k = 0;
//             while(k < maxn) {
//                 int l = 0;
//                 while (l < maxn) {
//                     int m = 0;
//                     while (m < maxn) {
//                         int h = 0;
//                         while (h < 7) {
//                             dp[i][j][k][l][m][h] = -1;
//                             h = h + 1;
//                         }
//                         m = m + 1;
//                     }
//                     l = l + 1;
//                 }
//                 k = k + 1;
//             }
//             j = j + 1;
//         }
//         i = i + 1;
//     }
    
//     i = 0;
//     while (i < n) {
//         list[i] = getint();
//         cns[list[i]] = cns[list[i]] + 1;
//         i = i + 1;
//     }

//     int ans = dfs(cns[1], cns[2], cns[3], cns[4], cns[5], 0);

//     putint(ans);

//     return ans;
// }
int n;
int swap (int array[], int i, int j){
    int temp;
    temp = array[i];
    array[i] = array[j];
    array[j] = temp;
    return 0;  
}
int heap_ajust(int arr[], int start, int end) {  
    int dad;
    dad = start;  
    int son;
    son = dad * 2 + 1;  
    while (son < end + 1) { //   
        if (son < end && arr[son] < arr[son + 1])
            son = son + 1;  
        if (arr[dad] > arr[son])
            return 0;  
        else {
            dad = swap(arr,dad,son);  
            dad = son;  
            son = dad * 2 + 1;  
        }  
    }  
    return 0;  
}  
int heap_sort(int arr[], int len) {  
    int i;  
    int tmp;
    i = len / 2 - 1;
    while ( i > -1) {
        tmp = len - 1;
        tmp = heap_ajust(arr, i, tmp);  
        i = i - 1;
    }    
    i = len - 1;   
    while ( i > 0) {  
        int tmp0;
        tmp0 = 0;
        tmp = swap(arr,tmp0,i);
        tmp = i - 1;
        tmp = heap_ajust(arr, tmp0, tmp);  
        i = i-1;
    }  
    return 0;
}  

int main(){
    n = 10;
    int a[10];
    a[0]=4;a[1]=3;a[2]=9;a[3]=2;a[4]=0;
    a[5]=1;a[6]=6;a[7]=5;a[8]=7;a[9]=8;
    int i;
    i = 0;
    i = heap_sort(a, n);
    while (i < n) {
        int tmp;
        tmp = a[i];
        putint(tmp);
        tmp = 10;
        putch(tmp);
        i = i + 1;
    }
    return 0;
}
