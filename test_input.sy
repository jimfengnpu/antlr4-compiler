// const int n = 256;
// int g[256][256];
// int fib[16][2][2]={{1, 1}, {2, 3}};
// int cnt = 0;
// int f = 1;
// int gcd(int a, int b){
//     if(!a)return b;
//     return gcd(b%a, a);
// }

// int main(){
//     int x, y, tx, ty, tg, s;
//     x = getint();
//     y = getint();
//     tx = getint();
//     ty = getint();
//     s = getint();
//     if(ty > tx){
//         int t = ty;
//         ty = tx;
//         tx = t;
//     }
//     tg = gcd(ty, tx);
//     if(tg != 1){
//         f = 0;
//     }
//     if(x < 256 && y < 256){
//         int i = 1;
//         while(i <= y){
//             int j = i;
//             while(j <= x){
//                 g[i][j] = gcd(i, j);
//                 if(i/g[i][j] == ty/tg && j/g[i][j] == tx/tg)
//                 {
//                     cnt = cnt + 1;
//                 }
//                 j = j + 1;
//             }
//             i = i + 1;
//         }
//     }
//     putint(f);
//     putch(10);
//     putint(s*(cnt-tg-(tg-1)));
//     putch(10);
//     return 0;
// }
// int n;
// int a[100];
// int a;
// int gcd(int a, int b) {
//     if(!a)return b;
//     return gcd(b%a, a);
// }
// int func(int a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8,
//     int a9, int a10, int a11, int a12, int a13, int a14){
//     a = a1;
//     return a0*a1;
// }
// int fib(int x){
//     for(int i=1;i<=x;i++){
//         a[i] = a[i-1] + i;
//     }
//     return x;
// }

// int main() {
//   int i;
//   i = getint();
//   putint(gcd(fib(i)*i, -i));
//   if(!gcd(1,2)){
//     putint(2);
//   }
//   return 0;
// }
// int main() {
//     int arr[10];
//     int c = 2, b=getint();
//     arr[2+b] = func(c, b, 3, 4, 5, 6,7,8,9,10,11,12,13,14,15);
//     return a+b;
// }
int n;
int swap (int array[], int i, int j){
    int temp;
    temp = array[i];
    array[i] = array[j];
    array[j] = temp;
    return 0;  
}
int heap_ajust(int arr[], int start, int end) {  
    int dad;
    dad = start;  
    int son;
    son = dad * 2 + 1;  
    while (son < end + 1) { //   
        if (son < end && arr[son] < arr[son + 1])
            son = son + 1;  
        if (arr[dad] > arr[son])
            return 0;  
        else {
            dad = swap(arr,dad,son);  
            dad = son;  
            son = dad * 2 + 1;  
        }  
    }  
    return 0;  
}  
int heap_sort(int arr[], int len) {  
    int i;  
    int tmp;
    i = len / 2 - 1;
    while ( i > -1) {
        tmp = len - 1;
        tmp = heap_ajust(arr, i, tmp);  
        i = i - 1;
    }    
    i = len - 1;   
    while ( i > 0) {  
        int tmp0;
        tmp0 = 0;
        tmp = swap(arr,tmp0,i);
        tmp = i - 1;
        tmp = heap_ajust(arr, tmp0, tmp);  
        i = i-1;
    }  
    return 0;
}  

int main(){
    n = 10;
    int a[10];
    a[0]=4;a[1]=3;a[2]=9;a[3]=2;a[4]=0;
    a[5]=1;a[6]=6;a[7]=5;a[8]=7;a[9]=8;
    int i;
    i = 0;
    i = heap_sort(a, n);
    while (i < n) {
        int tmp;
        tmp = a[i];
        putint(tmp);
        tmp = 10;
        putch(tmp);
        i = i + 1;
    }
    return 0;
}
