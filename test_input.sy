// const int n = 256;
// int g[256][256];
// int fib[16][2][2]={{1, 1}, {2, 3}};
// int cnt = 0;
// int f = 1;
// int gcd(int a, int b){
//     if(!a)return b;
//     return gcd(b%a, a);
// }

// int main(){
//     int x, y, tx, ty, tg, s;
//     x = getint();
//     y = getint();
//     tx = getint();
//     ty = getint();
//     s = getint();
//     if(ty > tx){
//         int t = ty;
//         ty = tx;
//         tx = t;
//     }
//     tg = gcd(ty, tx);
//     if(tg != 1){
//         f = 0;
//     }
//     if(x < 256 && y < 256){
//         int i = 1;
//         while(i <= y){
//             int j = i;
//             while(j <= x){
//                 g[i][j] = gcd(i, j);
//                 if(i/g[i][j] == ty/tg && j/g[i][j] == tx/tg)
//                 {
//                     cnt = cnt + 1;
//                 }
//                 j = j + 1;
//             }
//             i = i + 1;
//         }
//     }
//     putint(f);
//     putch(10);
//     putint(s*(cnt-tg-(tg-1)));
//     putch(10);
//     return 0;
// }
// int n;
// int a[100];
// int a;
// int gcd(int a, int b) {
//     if(!a)return b;
//     return gcd(b%a, a);
// }
// int func(int a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8,
//     int a9, int a10, int a11, int a12, int a13, int a14){
//     a = a1;
//     return a0*a1;
// }
// int fib(int x){
//     for(int i=1;i<=x;i++){
//         a[i] = a[i-1] + i;
//     }
//     return x;
// }

// int main() {
//   int i;
//   i = getint();
//   putint(gcd(fib(i)*i, -i));
//   if(!gcd(1,2)){
//     putint(2);
//   }
//   return 0;
// }
// int main() {
//     int arr[10];
//     int c = 2, b=getint();
//     arr[2+b] = func(c, b, 3, 4, 5, 6,7,8,9,10,11,12,13,14,15);
//     return a+b;
// }
const int maxn = 18;
const int mod = 1000000007;
int dp[maxn][maxn][maxn][maxn][maxn][7];
int list[200];

int equal(int a, int b) {
    if (a == b)
        return 1;
    return 0;
}

int dfs(int a, int b, int c, int d, int e, int last){
    if(dp[a][b][c][d][e][last] != -1)
        return dp[a][b][c][d][e][last];
    if(a + b + c + d + e == 0)
        return 1;
    int ans = 0;
    if (a) ans = (ans + (a - equal(last, 2)) * dfs(a - 1, b, c, d, e, 1)) % mod;
    if (b) ans = (ans + (b - equal(last, 3)) * dfs(a + 1, b - 1, c, d, e, 2)) % mod;
    if (c) ans = (ans + (c - equal(last, 4)) * dfs(a, b + 1, c - 1, d, e, 3)) % mod;
    if (d) ans = (ans + (d - equal(last, 5)) * dfs(a, b, c + 1, d - 1, e, 4)) % mod;
    if (e) ans = (ans + e * dfs(a, b, c, d + 1, e - 1, 5)) % mod;
    dp[a][b][c][d][e][last] = ans % mod;
    return dp[a][b][c][d][e][last];
}

int cns[20];
 
int main(){
    int n = getint();
    int i = 0; 
    while (i < maxn) {
        int j = 0;
        while(j < maxn) {
            int k = 0;
            while(k < maxn) {
                int l = 0;
                while (l < maxn) {
                    int m = 0;
                    while (m < maxn) {
                        int h = 0;
                        while (h < 7) {
                            dp[i][j][k][l][m][h] = -1;
                            h = h + 1;
                        }
                        m = m + 1;
                    }
                    l = l + 1;
                }
                k = k + 1;
            }
            j = j + 1;
        }
        i = i + 1;
    }
    
    i = 0;
    while (i < n) {
        list[i] = getint();
        cns[list[i]] = cns[list[i]] + 1;
        i = i + 1;
    }

    int ans = dfs(cns[1], cns[2], cns[3], cns[4], cns[5], 0);

    putint(ans);

    return ans;
}
